C51 COMPILER V9.60.7.0   TMR2                                                              11/08/2024 16:31:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR2
OBJECT MODULE PLACED IN .\Release\Objects\tmr2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr2.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Li
                    -stings\tmr2.lst) OBJECT(.\Release\Objects\tmr2.obj)

line level    source

   1          // ¶¨Ê±Æ÷TMR2µÄÇý¶¯Ô´ÎÄ¼þ
   2          #include "tmr2.h"
   3          
   4          // ¶¨Ê±Æ÷¶¨Ê±ÖÜÆÚ (µ¥Î»:Hz)
   5          // ÖÜÆÚÖµ = ÏµÍ³Ê±ÖÓ / ¶¨Ê±Æ÷·ÖÆµ / ÆµÂÊ - 1
   6          #define TMR2_PERIOD (SYSCLK / 128 / 10000 - 1) // 10000Hz,100us
   7          
   8          volatile u32 tmr2_cnt = 0; // ¶¨Ê±Æ÷TMR2µÄ¼ÆÊýÖµ£¨Ã¿´ÎÔÚÖÐ¶Ï·þÎñº¯ÊýÖÐ»á¼ÓÒ»£©
   9          
  10          /**
  11           * @brief ÅäÖÃ¶¨Ê±Æ÷TMR2£¬ÅäÖÃÍê³Éºó£¬¶¨Ê±Æ÷Ä¬ÈÏ¹Ø±Õ
  12           */
  13          void tmr2_config(void)
  14          {
  15   1          __SetIRQnIP(TMR2_IRQn, TMR2_IQn_CFG); // ÉèÖÃÖÐ¶ÏÓÅÏÈ¼¶
  16   1          __DisableIRQ(TMR2_IRQn);              // ½ûÓÃÖÐ¶Ï
  17   1          IE_EA = 1;                            // ´ò¿ª×ÜÖÐ¶Ï
  18   1      
  19   1          // Çå³ýTMR2µÄ¼ÆÊýÖµ
  20   1          TMR2_CNTL = 0;
  21   1          TMR2_CNTH = 0;
  22   1      
  23   1          TMR2_CONL &= ~TMR_PRESCALE_SEL(0x03); // Çå³ýTMR2µÄÔ¤·ÖÆµÅäÖÃ¼Ä´æÆ÷
  24   1          TMR2_CONL |= TMR_PRESCALE_SEL(0x07);  // ¶¨Ê±Æ÷Ô¤·ÖÆµ
  25   1          TMR2_CONL &= ~TMR_MODE_SEL(0x03);     // Çå³ýTMR2µÄÄ£Ê½ÅäÖÃ¼Ä´æÆ÷
  26   1          TMR2_CONL |= TMR_MODE_SEL(0x01);      // ÅäÖÃTMR2µÄÄ£Ê½Îª¼ÆÊýÆ÷Ä£Ê½£¬×îºó¶ÔÏµÍ³Ê±ÖÓµÄÂö³å½øÐÐ¼ÆÊý
  27   1      
  28   1          TMR2_CONH &= ~TMR_PRD_PND(0x01); // Çå³ýTMR2µÄ¼ÆÊý±êÖ¾Î»£¬±íÊ¾Î´Íê³É¼ÆÊý
  29   1          TMR2_CONH |= TMR_PRD_IRQ_EN(1);  // Ê¹ÄÜTMR2µÄ¼ÆÊýÖÐ¶Ï
  30   1      
  31   1          // ÅäÖÃTMR2µÄ¼ÆÊýÖÜÆÚ
  32   1          TMR2_PRH = TMR_PERIOD_VAL_H((TMR2_PERIOD >> 8) & 0xFF); // ÖÜÆÚÖµ
  33   1          TMR2_PRL = TMR_PERIOD_VAL_L((TMR2_PERIOD >> 0) & 0xFF);
  34   1      
  35   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // Çå³ýTMR2µÄÊ±ÖÓÔ´ÅäÖÃ¼Ä´æÆ÷
  36   1          TMR2_CONL |= TMR_SOURCE_SEL(0x05);    // ÅäÖÃTMR2µÄÊ±ÖÓÔ´£¬²»ÓÃÈÎºÎÊ±ÖÓ
  37   1      }
  38          
  39          /**
  40           * @brief ¿ªÆô¶¨Ê±Æ÷TMR2£¬¿ªÊ¼¼ÆÊ±
  41           */
  42          void tmr2_enable(void)
  43          {
  44   1          // ÖØÐÂ¸øTMR2ÅäÖÃÊ±ÖÓ
  45   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // Çå³ý¶¨Ê±Æ÷µÄÊ±ÖÓÔ´ÅäÖÃ¼Ä´æÆ÷
  46   1          TMR2_CONL |= TMR_SOURCE_SEL(0x06);    // ÅäÖÃ¶¨Ê±Æ÷µÄÊ±ÖÓÔ´£¬Ê¹ÓÃÏµÍ³Ê±ÖÓ
  47   1      
  48   1          __EnableIRQ(TMR2_IRQn); // Ê¹ÄÜÖÐ¶Ï
  49   1          IE_EA = 1;              // ´ò¿ª×ÜÖÐ¶Ï
  50   1      }
  51          
  52          /**
  53           * @brief ¹Ø±Õ¶¨Ê±Æ÷£¬Çå¿Õ¼ÆÊýÖµ
C51 COMPILER V9.60.7.0   TMR2                                                              11/08/2024 16:31:54 PAGE 2   

  54           */
  55          void tmr2_disable(void)
  56          {
  57   1          // ²»¸ø¶¨Ê±Æ÷Ìá¹©Ê±ÖÓ£¬ÈÃËüÍ£Ö¹¼ÆÊý
  58   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // Çå³ý¶¨Ê±Æ÷µÄÊ±ÖÓÔ´ÅäÖÃ¼Ä´æÆ÷
  59   1          TMR2_CONL |= TMR_SOURCE_SEL(0x05);    // ÅäÖÃ¶¨Ê±Æ÷µÄÊ±ÖÓÔ´£¬²»ÓÃÈÎºÎÊ±ÖÓ
  60   1      
  61   1          // Çå³ý¶¨Ê±Æ÷µÄ¼ÆÊýÖµ
  62   1          TMR2_CNTL = 0;
  63   1          TMR2_CNTH = 0;
  64   1      
  65   1          __DisableIRQ(TMR2_IRQn); // ¹Ø±ÕÖÐ¶Ï£¨²»Ê¹ÄÜÖÐ¶Ï£©
  66   1      }
  67          
  68          // TMR2ÖÐ¶Ï·þÎñº¯Êý
  69          void TIMR2_IRQHandler(void) interrupt TMR2_IRQn
  70          {
  71   1          // ½øÈëÖÐ¶ÏÉèÖÃIP£¬²»¿ÉÉ¾³ý
  72   1          __IRQnIPnPush(TMR2_IRQn);
  73   1          // ---------------- ÓÃ»§º¯Êý´¦Àí -------------------
  74   1          // ÖÜÆÚÖÐ¶Ï
  75   1          if (TMR2_CONH & TMR_PRD_PND(0x1))
  76   1          {
  77   2              TMR2_CONH |= TMR_PRD_PND(0x1); // Çå³ýpending
  78   2              tmr2_cnt++;
  79   2          }
  80   1      
  81   1          // ÍË³öÖÐ¶ÏÉèÖÃIP£¬²»¿ÉÉ¾³ý
  82   1          __IRQnIPnPop(TMR2_IRQn);
  83   1      }
  84          
  85          #if USE_TMR2
              
              // volatile unsigned char tmr2_flag = 0; // tmr2ÖÐ¶Ï·þÎñº¯ÊýÖÐ»áÖÃÎ»µÄ±êÖ¾Î»
              volatile u32 tmr2_cnt = 0; // ¶¨Ê±Æ÷TMR2µÄ¼ÆÊýÖµ£¨Ã¿´ÎÔÚÖÐ¶Ï·þÎñº¯ÊýÖÐ»á¼ÓÒ»£©
              
              /**
               * @brief ÅäÖÃ¶¨Ê±Æ÷TMR2
               */
              void tmr2_config(void)
              {
                  // ÅäÖÃ¶¨Ê±Æ÷£¬ÓÃÀ´¼ÇÂ¼RF½ÓÊÕµ½µÄ¸ßµçÆ½³ÖÐøÊ±¼ä
                  __SetIRQnIP(TMR2_IRQn, TMR2_IQn_CFG); // ÉèÖÃÖÐ¶ÏÓÅÏÈ¼¶£¨TMR2£©
              
                  TMR2_CONL &= ~TMR_PRESCALE_SEL(0x03); // Çå³ýTMR2µÄÔ¤·ÖÆµÅäÖÃ¼Ä´æÆ÷
                  // ÅäÖÃTMR2µÄÔ¤·ÖÆµ£¬Îª32·ÖÆµ£¬¼´21MHz / 32 = 0.67MHz£¬Ô¼0.67us¼ÆÊýÒ»´Î
                  // £¨Êµ¼Ê²âÊÔºÍ¼ÆËãµÃ³öÕâ¸öÏµÍ³Ê±ÖÓÊÇ21MHzµÄ£¬µ«ÊÇ»¹ÊÇÓÐÐ©Îó²î£¬²»ÊÇ×¼È·µÄ21MHz£©
                  TMR2_CONL |= TMR_PRESCALE_SEL(0x05);
                  TMR2_CONL &= ~TMR_MODE_SEL(0x03); // Çå³ýTMR2µÄÄ£Ê½ÅäÖÃ¼Ä´æÆ÷
                  TMR2_CONL |= TMR_MODE_SEL(0x01);  // ÅäÖÃTMR2µÄÄ£Ê½Îª¼ÆÊýÆ÷Ä£Ê½£¬×îºó¶ÔÏµÍ³Ê±ÖÓµÄÂö³å½øÐÐ¼ÆÊý
              
                  TMR2_CONH &= ~TMR_PRD_PND(0x01); // Çå³ýTMR2µÄ¼ÆÊý±êÖ¾Î»£¬±íÊ¾Î´Íê³É¼ÆÊý
                  TMR2_CONH |= TMR_PRD_IRQ_EN(1);  // Ê¹ÄÜTMR2µÄ¼ÆÊýÖÐ¶Ï
              
                  // ÅäÖÃTMR2µÄ¼ÆÊýÖÜÆÚ
                  TMR2_PRL = (unsigned char)(TMR2_CNT_TIME % 255);
                  TMR2_PRH = (unsigned char)(TMR2_CNT_TIME / 255);
              
                  // Çå³ýTMR2µÄ¼ÆÊýÖµ
                  TMR2_CNTL = 0;
                  TMR2_CNTH = 0;
              
C51 COMPILER V9.60.7.0   TMR2                                                              11/08/2024 16:31:54 PAGE 3   

                  TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // Çå³ýTMR2µÄÊ±ÖÓÔ´ÅäÖÃ¼Ä´æÆ÷
                  // TMR2_CONL |= TMR_SOURCE_SEL(0x07); // ÅäÖÃTMR2µÄÊ±ÖÓÔ´£¬Ê¹ÓÃÏµÍ³Ê±ÖÓ
                  TMR2_CONL |= TMR_SOURCE_SEL(0x05); // ÅäÖÃTMR2µÄÊ±ÖÓÔ´£¬²»ÓÃÈÎºÎÊ±ÖÓ
                                                     // __EnableIRQ(TMR2_IRQn);                          // Ê¹ÄÜÖÐ¶Ï
              
                  __DisableIRQ(TMR2_IRQn); // ½ûÓÃÖÐ¶Ï
                  IE_EA = 1;               // ´ò¿ª×ÜÖÐ¶Ï
              }
              
              /**
               * @brief ¿ªÆô¶¨Ê±Æ÷TMR2£¬¿ªÊ¼¼ÆÊ±
               */
              void tmr2_enable(void)
              {
                  // ÖØÐÂ¸øTMR2ÅäÖÃÊ±ÖÓ
                  TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // Çå³ý¶¨Ê±Æ÷µÄÊ±ÖÓÔ´ÅäÖÃ¼Ä´æÆ÷
                  TMR2_CONL |= TMR_SOURCE_SEL(0x06);    // ÅäÖÃ¶¨Ê±Æ÷µÄÊ±ÖÓÔ´£¬Ê¹ÓÃÏµÍ³Ê±ÖÓ£¨Ô¼21MHz£©
              
                  __EnableIRQ(TMR2_IRQn); // Ê¹ÄÜÖÐ¶Ï
                  IE_EA = 1;              // ´ò¿ª×ÜÖÐ¶Ï
              }
              
              /**
               * @brief ¹Ø±Õ¶¨Ê±Æ÷2£¬Çå¿Õ¼ÆÊýÖµ
               */
              void tmr2_disable(void)
              {
                  // ²»¸ø¶¨Ê±Æ÷Ìá¹©Ê±ÖÓ£¬ÈÃËüÍ£Ö¹¼ÆÊý
                  TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // Çå³ý¶¨Ê±Æ÷µÄÊ±ÖÓÔ´ÅäÖÃ¼Ä´æÆ÷
                  TMR2_CONL |= TMR_SOURCE_SEL(0x05);    // ÅäÖÃ¶¨Ê±Æ÷µÄÊ±ÖÓÔ´£¬²»ÓÃÈÎºÎÊ±ÖÓ
              
                  // Çå³ý¶¨Ê±Æ÷µÄ¼ÆÊýÖµ
                  TMR2_CNTL = 0;
                  TMR2_CNTH = 0;
              
                  __DisableIRQ(TMR2_IRQn); // ¹Ø±ÕÖÐ¶Ï£¨²»Ê¹ÄÜÖÐ¶Ï£©
              }
              
              // ¶¨Ê±Æ÷ÅäÖÃ³ÉPWMÊä³öÄ£Ê½£¨µ÷ÓÃ¸Ãº¯ÊýÇ°£¬ÒªÏÈ½«¶ÔÓ¦µÄIO¸´ÓÃµ½¶¨Ê±Æ÷µÄPWMÊä³öÉÏ£©
              void tmr2_pwm_config(void)
              {
                  //  ÅäÖÃP24Îªtimer2µÄPWMÊä³ö¶Ë¿Ú
                  P2_MD1 &= ~GPIO_P24_MODE_SEL(0x3); // ÇåÁã
                  P2_MD1 |= GPIO_P24_MODE_SEL(0x1);  // Êä³öÄ£Ê½
                  FOUT_S24 = GPIO_FOUT_TMR2_PWMOUT;  // ¸´ÓÃ³ÉTMRµÄPWMÊä³ö
              
              // #define PEROID_VAL (SYSCLK / 128 / 10000 - 1) // ÖÜÆÚÖµ=ÏµÍ³Ê±ÖÓ/·ÖÆµ/ÆµÂÊ - 1     // 10KHz
              #define PEROID_VAL (SYSCLK / 128 / 1000 - 1) // ÖÜÆÚÖµ=ÏµÍ³Ê±ÖÓ/·ÖÆµ/ÆµÂÊ - 1     // 1KHz
                  // #define PEROID_VAL (SYSCLK / 128 / 100 - 1) // ÖÜÆÚÖµ=ÏµÍ³Ê±ÖÓ/·ÖÆµ/ÆµÂÊ - 1     // 100Hz
                  // #define PEROID_VAL (SYSCLK / 128 / 10 - 1) // ÖÜÆÚÖµ=ÏµÍ³Ê±ÖÓ/·ÖÆµ/ÆµÂÊ - 1     // 10Hz
              
                  // ÅäÖÃÆµÂÊÎª1kHZ£¬50%Õ¼¿Õ±ÈµÄPWM    PWMÆµÂÊ=ÏµÍ³Ê±ÖÓ/·ÖÆµ/(ÖÜÆÚÖµ+1)
                  TMR_ALLCON = TMR2_CNT_CLR(0x1);                        // Çå³ý¼ÆÊýÖµ
                  TMR2_PRH = TMR_PERIOD_VAL_H((PEROID_VAL >> 8) & 0xFF); // ÖÜÆÚÖµ
                  TMR2_PRL = TMR_PERIOD_VAL_L((PEROID_VAL >> 0) & 0xFF);
                  TMR2_PWMH = TMR_PWM_VAL_H(((PEROID_VAL / 2) >> 8) & 0xFF); // Õ¼¿Õ±ÈÉèÖÃÖµ
                  TMR2_PWML = TMR_PWM_VAL_L(((PEROID_VAL / 2) >> 0) & 0xFF);
                  TMR2_CONH = TMR_PRD_PND(0x1) | TMR_PRD_IRQ_EN(0x1);                          // Ê¹ÄÜ¼ÆÊýÖÐ¶Ï
                  TMR2_CONL = TMR_SOURCE_SEL(0x7) | TMR_PRESCALE_SEL(0x7) | TMR_MODE_SEL(0x2); // Ñ¡ÔñÏµÍ³Ê±ÖÓ£¬128·ÖÆµ£
             -¬PWMÄ£Ê½
              }
              
C51 COMPILER V9.60.7.0   TMR2                                                              11/08/2024 16:31:54 PAGE 4   

              // TMR2ÖÐ¶Ï·þÎñº¯Êý
              void TIMR2_IRQHandler(void) interrupt TMR2_IRQn
              {
              #if 1 // ¶¨Ê±Æ÷µÄ¶¨Ê±ÖÐ¶Ï
                  // ½øÈëÖÐ¶ÏÉèÖÃIP£¬²»¿ÉÉ¾³ý
                  __IRQnIPnPush(TMR2_IRQn);
              
                  // ---------------- ÓÃ»§º¯Êý´¦Àí -------------------
              
                  // ÖÜÆÚÖÐ¶Ï
                  if (TMR2_CONH & TMR_PRD_PND(0x1))
                  {
                      TMR2_CONH |= TMR_PRD_PND(0x1); // Çå³ýpending
              
                      tmr2_cnt++; // Ã¿5ms¼ÓÒ»´Î
                  }
              
                  // ÍË³öÖÐ¶ÏÉèÖÃIP£¬²»¿ÉÉ¾³ý
                  __IRQnIPnPop(TMR2_IRQn);
              #endif
              }
              #endif // USE_TMR2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    188    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
