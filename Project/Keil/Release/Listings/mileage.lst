C51 COMPILER V9.60.7.0   MILEAGE                                                           11/21/2024 17:58:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MILEAGE
OBJECT MODULE PLACED IN .\Release\Objects\mileage.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\mileage.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) INC
                    -DIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Lis
                    -tings\mileage.lst) OBJECT(.\Release\Objects\mileage.obj)

line level    source

   1          // 里程表的源程序
   2          #include "mileage.h"
   3          
   4          // 总里程扫描
   5          void mileage_scan(void)
   6          {
   7   1          static u32 old_total_mileage = 0;    // 用来记录旧的大计里程的变量
   8   1          static u32 old_subtotal_mileage = 0; // 用来记录旧的小计里程的变量
   9   1      
  10   1          static bit flag_tmr_is_open = 0; // 定时器是否打开的标志位
  11   1      
  12   1          // 打开定时器
  13   1          if (0 == flag_tmr_is_open)
  14   1          {
  15   2              flag_tmr_is_open = 1;
  16   2              tmr3_cnt = 0;
  17   2              tmr3_enable();
  18   2          }
  19   1      
  20   1          if (tmr3_cnt >= 30000) // 30000 ms -- 30s
  21   1          {
  22   2              // 每30s将大计里程和小计里程写入flash
  23   2              // tmr3_disable();
  24   2              tmr3_cnt = 0;
  25   2              // flag_tmr_is_open = 0;
  26   2      
  27   2              // flash_write(0x00, (u8 *)&fun_info, sizeof(fun_info));
  28   2              fun_info_save(); // 将 fun_info 写回flash
  29   2          }
  30   1      
  31   1          if (distance >= 1000)
  32   1          {
  33   2              // 如果走过的距离超过了1m，再进行保存
  34   2      
  35   2              // 限制大计里程在 1000000000000 mm(1000,000km)以内
  36   2              if (fun_info.save_info.total_mileage < (u32)1000000000000 - 1001)
  37   2              {
  38   3                  fun_info.save_info.total_mileage += distance / 1000; // 将毫米转换成米，再保存
  39   3              }
  40   2      
  41   2              // 限制小计里程在 1,000,000,000 mm(1000km)以内
  42   2              if (fun_info.save_info.subtotal_mileage < (u32)1000000000 - 1001)
  43   2              {
  44   3                  fun_info.save_info.subtotal_mileage += distance / 1000; // 将毫米转换成米，再保存
  45   3              }
  46   2      
  47   2              distance -= 1000; // 剩下的、未保存的、不满1m的数据留到下一次再保存
  48   2          }
  49   1      
  50   1      #ifdef USE_INTERNATIONAL /* 公制单位 */
  51   1                               // 如果大计里程有变化且超过了100m
  52   1          if ((fun_info.save_info.total_mileage - old_total_mileage) > 100)
  53   1      #else /* USE_IMPERIAL // 英制单位 */
C51 COMPILER V9.60.7.0   MILEAGE                                                           11/21/2024 17:58:18 PAGE 2   

                  // 如果大计里程有变化且超过了161m(0.1英里)
                  if ((fun_info.save_info.total_mileage - old_total_mileage) > 161)
              #endif
  57   1          {
  58   2              old_total_mileage = fun_info.save_info.total_mileage; // 记录旧的里程
  59   2      
  60   2              // printf("total mileage: %lum\n", fun_info.total_mileage);
  61   2      
  62   2              {
  63   3                  // 发送数据的操作，可以先置标志位
  64   3                  flag_get_total_mileage = 1;
  65   3              }
  66   2          }
  67   1      
  68   1      #ifdef USE_INTERNATIONAL /* 公制单位 */
  69   1                               // 如果小计里程有变化且超过了100m
  70   1          if ((fun_info.save_info.subtotal_mileage - old_subtotal_mileage) > 100)
  71   1      #else /* USE_IMPERIAL // 英制单位 */
                  // 如果小计里程有变化且超过了161m(0.1英里)
                  if ((fun_info.save_info.subtotal_mileage - old_subtotal_mileage) > 161)
              #endif
  75   1          {
  76   2              old_subtotal_mileage = fun_info.save_info.subtotal_mileage; // 记录旧的里程
  77   2      
  78   2              // printf("subtotal mileage: %lum\n", fun_info.subtotal_mileage);
  79   2      
  80   2              {
  81   3                  // 发送数据的操作，可以先置标志位
  82   3                  flag_get_sub_total_mileage = 1;
  83   3              }
  84   2          }
  85   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    318    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
