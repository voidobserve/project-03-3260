C51 COMPILER V9.60.7.0   TMR1                                                              11/08/2024 16:31:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR1
OBJECT MODULE PLACED IN .\Release\Objects\tmr1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr1.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Li
                    -stings\tmr1.lst) OBJECT(.\Release\Objects\tmr1.obj)

line level    source

   1          #include "tmr1.h"
   2          
   3          // #define TMR1_CNT_TIME 152 // 152 * 0.65625us 约等于100us
   4          
   5          // 定时器定时周期 (单位:Hz)
   6          // 周期值 = 系统时钟 / 定时器分频 / 频率 - 1
   7          #define TMR1_PERIOD (SYSCLK / 128 / 10000 - 1) // 10000Hz,100us
   8          
   9          // volatile bit tmr1_flag = 0; // TMR1中断服务函数中会置位的标志位
  10          volatile u32 tmr1_cnt = 0; // 定时器TMR1的计数值（每次在中断服务函数中会加一）
  11          
  12          /**
  13           * @brief 配置定时器TMR1，配置完成后，定时器默认关闭
  14           */
  15          void tmr1_config(void)
  16          {
  17   1          __SetIRQnIP(TMR1_IRQn, TMR1_IQn_CFG); // 设置中断优先级（TMR1）
  18   1          __DisableIRQ(TMR1_IRQn);              // 禁用中断
  19   1          IE_EA = 1;                            // 打开总中断
  20   1      
  21   1          // 清除TMR1的计数值
  22   1          TMR1_CNTL = 0;
  23   1          TMR1_CNTH = 0;
  24   1      
  25   1          TMR1_CONL &= ~TMR_PRESCALE_SEL(0x03); // 清除TMR1的预分频配置寄存器
  26   1          TMR1_CONL |= TMR_PRESCALE_SEL(0x07);  // 定时器预分频
  27   1          TMR1_CONL &= ~TMR_MODE_SEL(0x03);     // 清除TMR1的模式配置寄存器
  28   1          TMR1_CONL |= TMR_MODE_SEL(0x01);      // 配置TMR1的模式为计数器模式，最后对系统时钟的脉冲进行计数
  29   1      
  30   1          TMR1_CONH &= ~TMR_PRD_PND(0x01); // 清除TMR1的计数标志位，表示未完成计数
  31   1          TMR1_CONH |= TMR_PRD_IRQ_EN(1);  // 使能TMR1的计数中断
  32   1      
  33   1          // 配置TMR1的计数周期
  34   1          TMR1_PRH = TMR_PERIOD_VAL_H((TMR1_PERIOD >> 8) & 0xFF); // 周期值
  35   1          TMR1_PRL = TMR_PERIOD_VAL_L((TMR1_PERIOD >> 0) & 0xFF);
  36   1      
  37   1          TMR1_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除TMR1的时钟源配置寄存器
  38   1          TMR1_CONL |= TMR_SOURCE_SEL(0x05); // 配置TMR1的时钟源，不用任何时钟
  39   1      }
  40          
  41          /**
  42           * @brief 开启定时器TMR1，开始计时
  43           */
  44          void tmr1_enable(void)
  45          {
  46   1          // 重新给TMR1配置时钟
  47   1          TMR1_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  48   1          TMR1_CONL |= TMR_SOURCE_SEL(0x06);    // 配置定时器的时钟源，使用系统时钟
  49   1      
  50   1          __EnableIRQ(TMR1_IRQn); // 使能中断
  51   1          IE_EA = 1;              // 打开总中断
  52   1      }
  53          
C51 COMPILER V9.60.7.0   TMR1                                                              11/08/2024 16:31:54 PAGE 2   

  54          /**
  55           * @brief 关闭定时器，清空计数值
  56           */
  57          void tmr1_disable(void)
  58          {
  59   1          // 不给定时器提供时钟，让它停止计数
  60   1          TMR1_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  61   1          TMR1_CONL |= TMR_SOURCE_SEL(0x05);    // 配置定时器的时钟源，不用任何时钟
  62   1      
  63   1          // 清除定时器的计数值
  64   1          TMR1_CNTL = 0;
  65   1          TMR1_CNTH = 0;
  66   1      
  67   1          __DisableIRQ(TMR1_IRQn); // 关闭中断（不使能中断）
  68   1      }
  69          
  70          // TMR1中断服务函数
  71          void TIMR1_IRQHandler(void) interrupt TMR1_IRQn
  72          {
  73   1          // 进入中断设置IP，不可删除
  74   1          __IRQnIPnPush(TMR1_IRQn);
  75   1      
  76   1          // ---------------- 用户函数处理 -------------------
  77   1      
  78   1          // 周期中断
  79   1          if (TMR1_CONH & TMR_PRD_PND(0x1))
  80   1          {
  81   2              TMR1_CONH |= TMR_PRD_PND(0x1); // 清除pending
  82   2      
  83   2              tmr1_cnt++;
  84   2      
  85   2      #if 0
                      // 如果到了5s
                      if (TMR1_cnt == 1000)
                      {
                          TMR1_cnt = 0;
                          TMR1_flag = 1; // 给对应的标志位置一
                      }
              #endif
  93   2          }
  94   1      
  95   1          // 退出中断设置IP，不可删除
  96   1          __IRQnIPnPop(TMR1_IRQn);
  97   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    178    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
