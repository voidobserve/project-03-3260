C51 COMPILER V9.60.7.0   ENGINE_SPEED_SCAN                                                 11/08/2024 16:31:55 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ENGINE_SPEED_SCAN
OBJECT MODULE PLACED IN .\Release\Objects\engine_speed_scan.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\engine_speed_scan.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0
                    -X000C) INCDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\R
                    -elease\Listings\engine_speed_scan.lst) OBJECT(.\Release\Objects\engine_speed_scan.obj)

line level    source

   1          #include "engine_speed_scan.h"
   2          
   3          // 发动机每转一圈，能检测到的脉冲个数
   4          #ifndef ENGINE_PULSE_PER_TURN
   5          #define ENGINE_PULSE_PER_TURN 16
   6          #endif
   7          
   8          static volatile u32 pulse_cnt = 0; // 脉冲计数值
   9          
  10          // 发动机转速的相关配置
  11          void engine_speed_scan_config(void)
  12          {
  13   1          // 使用IO中断来对脉冲计数
  14   1          __SetIRQnIP(P1_IRQn, P1_IQn_CFG); // 设置中断优先级
  15   1          __EnableIRQ(P1_IRQn);             // 使能P1中断
  16   1          IE_EA = 1;                        // 使能总开关
  17   1      
  18   1          P1_MD0 &= ~GPIO_P12_MODE_SEL(0x3); // 输入模式
  19   1          P1_PD |= GPIO_P12_PULL_PD(0x1);    // 配置为下拉
  20   1          P1_IMK |= GPIO_P12_IRQ_MASK(0x1);  // 使能IO中断
  21   1          P1_TRG0 &= ~GPIO_P12_TRG_SEL(0x3);
  22   1          P1_TRG0 |= GPIO_P12_TRG_SEL(0x2); // 配置上升沿触发
  23   1      }
  24          
  25          // 获取发动机每分钟转速
  26          // static u32 get_engine_speed_rpm(void)
  27          // {
  28          //     // return (get_turns_per_250ms() * 4 * 60);
  29          
  30          //     u32 tmp = 0;
  31          //     pulse_cnt = 0;
  32          //     tmr1_cnt = 0;
  33          //     tmr1_enable();
  34          //     __EnableIRQ(P1_IRQn); // 使能中断
  35          
  36          
  37          //     while (tmr1_cnt < 2500)
  38          //     {
  39          //     }; // 等待250ms
  40          
  41          //     // 计算出每min(250ms * 4 * 60 == 1min)转了多少圈
  42          //     tmp = pulse_cnt * 240 / ENGINE_PULSE_PER_TURN;
  43          
  44          //     tmr1_disable();
  45          
  46          
  47          //     __DisableIRQ(P1_IRQn); // 禁用中断
  48          
  49          //     tmr1_cnt = 0;
  50          //     pulse_cnt = 0;
  51          
  52          //     return tmp;
  53          // }
C51 COMPILER V9.60.7.0   ENGINE_SPEED_SCAN                                                 11/08/2024 16:31:55 PAGE 2   

  54          
  55          // 发动机转速扫描
  56          void engine_speed_scan(void)
  57          {
  58   1          // u32 rpm = get_engine_speed_rpm();
  59   1          // // printf("rpm: %lu\n", rpm);
  60   1      
  61   1          // fun_info.engine_speeed = rpm;
  62   1          // flag_get_engine_speed = 1;
  63   1          
  64   1          u32 rpm = 0;
  65   1          
  66   1          if (tmr1_cnt >= 2500) // 如果已经过了250ms
  67   1          {
  68   2              // 250ms * 4 * 60 == 1min
  69   2              // 下面是根据250ms检测到的脉冲个数来计算出每分钟的转速
  70   2              rpm = pulse_cnt * 240 / ENGINE_PULSE_PER_TURN; 
  71   2      
  72   2              tmr1_cnt = 0;
  73   2              pulse_cnt = 0;
  74   2              fun_info.engine_speeed = rpm;
  75   2              printf("engine speed %lu rpm\n", rpm);
  76   2              // flag_get_engine_speed = 1; // 多久更新一次状态还未确定
  77   2          }
  78   1      
  79   1      }
  80          
  81          
  82          // P1中断服务函数
  83          void P1_IRQHandler(void) interrupt P1_IRQn
  84          {
  85   1          // Px_PND寄存器写任何值都会清标志位
  86   1          u8 p1_pnd = P1_PND;
  87   1      
  88   1          // 进入中断设置IP，不可删除
  89   1          __IRQnIPnPush(P1_IRQn);
  90   1          // ---------------- 用户函数处理 -------------------
  91   1      
  92   1          if (p1_pnd & GPIO_P12_IRQ_PNG(0x1))
  93   1          {
  94   2              pulse_cnt++;
  95   2          }
  96   1          P1_PND = p1_pnd; // 清P1中断标志位
  97   1      
  98   1          // -------------------------------------------------
  99   1          // 退出中断设置IP，不可删除
 100   1          __IRQnIPnPop(P1_IRQn);
 101   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    238    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =      4       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
