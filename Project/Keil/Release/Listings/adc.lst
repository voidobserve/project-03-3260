C51 COMPILER V9.60.7.0   ADC                                                               10/26/2024 17:00:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Release\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\adc.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) INC
                    -DIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Lis
                    -tings\adc.lst) OBJECT(.\Release\Objects\adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          // 用自定义的序号来标记测量adc的引脚，方便切换adc的引脚时进行判断
   4          #define ADC_PIN_BATTERY 0x01 // 测量电池电压的引脚
   5          #define ADC_PIN_TOUCH 0x02   // 测量触摸芯片发送过来的电压的引脚
   6          
   7          u16 adc_val = 0; // adc值，0~4095
   8          // bit adc_done_flag = 0; // adc转换完成标志
   9          
  10          // adc引脚配置，使用adc时还需要切换到对应的引脚通道
  11          void adc_pin_config(void)
  12          {
  13   1          // 配置P23为模拟输入模式
  14   1          P2_MD0 |= GPIO_P23_MODE_SEL(0x3); // 设为模拟模式
  15   1          // P04--测量电池电压的引脚
  16   1          P0_MD0 |= GPIO_P04_MODE_SEL(0x3); // 模拟模式
  17   1          // P05--测量触摸IC传过来的电压的引脚
  18   1          P0_MD0 |= GPIO_P05_MODE_SEL(0x3); // 模拟模式
  19   1      
  20   1          // ADC配置
  21   1          ADC_ACON1 &= ~(ADC_VREF_SEL(0x7) | ADC_EXREF_SEL(0x1)); // 清除电压选择，关闭外部参考电压
  22   1          ADC_ACON1 &= ~(ADC_INREF_SEL(0x01));                    // 关闭内部参考电压
  23   1          
  24   1          // 不能使用VCCA，待修改，看看芯片最低的工作电压和实际提供的电压
  25   1          ADC_ACON1 |= ADC_VREF_SEL(0x06) | ADC_TEN_SEL(0x3);     // 选择内部参考电压VCCA，关闭测试信号
  26   1          ADC_ACON0 = ADC_CMP_EN(0x1) |                           // 打开ADC中的CMP使能信号
  27   1                      ADC_BIAS_EN(0x1) |                          // 打开ADC偏置电流能使信号
  28   1                      ADC_BIAS_SEL(0x1);                          // 偏置电流选择：1x
  29   1      }
  30          
  31          // 切换adc扫描的引脚
  32          // pin_index--引脚序号
  33          void adc_sel_pin(u8 pin_index)
  34          {
  35   1          switch (pin_index)
  36   1          {
  37   2          case ADC_PIN_BATTERY:                  // P04
  38   2              ADC_CHS0 = ADC_ANALOG_CHAN(0x04) | // P04通路
  39   2                         ADC_EXT_SEL(0x0);       // 选择外部通路
  40   2              ADC_CFG0 |= ADC_CHAN0_EN(0x1) |    // 使能通道0转换
  41   2                          ADC_EN(0x1);           // 使能A/D转换
  42   2              break;
  43   2      
  44   2          case ADC_PIN_TOUCH:                    // P05
  45   2              ADC_CHS0 = ADC_ANALOG_CHAN(0x05) | // P05通路
  46   2                         ADC_EXT_SEL(0x0);       // 选择外部通路
  47   2              ADC_CFG0 |= ADC_CHAN0_EN(0x1) |    // 使能通道0转换
  48   2                          ADC_EN(0x1);           // 使能A/D转换
  49   2              break;
  50   2          }
  51   1          delay_ms(1); // 等待ADC模块配置稳定，需要等待20us以上
  52   1      }
  53          
C51 COMPILER V9.60.7.0   ADC                                                               10/26/2024 17:00:25 PAGE 2   

  54          // 获取adc值，存放到变量adc_val中(adc单次转换)
  55          u16 adc_single_convert(void)
  56          {
  57   1          ADC_CFG0 |= ADC_CHAN0_TRG(0x1); // 触发ADC0转换
  58   1          while (!(ADC_STA & ADC_CHAN0_DONE(0x1)))
  59   1              ;                                           // 等待转换完成
  60   1          ADC_STA = ADC_CHAN0_DONE(0x1);                  // 清除ADC0转换完成标志位
  61   1          return ((ADC_DATAH0 << 4) | (ADC_DATAL0 >> 4)); // 读取ADC0的值
  62   1      }
  63          
  64          // adc采集+滤波
  65          void adc_sample_filter(void)
  66          {
  67   1          u8 i = 0;
  68   1          u32 tmp;
  69   1          for (i = 0; i < 32; i++)
  70   1          {
  71   2              tmp += adc_single_convert();
  72   2              if (i >= 1)
  73   2              {
  74   3                  tmp >>= 1; // 相当于tmp /= 2;
  75   3              }
  76   2          }
  77   1      
  78   1          adc_val = (u16)tmp;
  79   1      }
  80          
  81          void adc_showval(void)
  82          {
  83   1          adc_sel_pin(ADC_PIN_BATTERY);
  84   1          adc_sample_filter();
  85   1      
  86   1          // 连接串口查看ADC值
  87   1          printf("ADC_PIN_BATTERY = %d\r\n", adc_val);
  88   1          delay_ms(500);
  89   1      
  90   1          adc_sel_pin(ADC_PIN_TOUCH);
  91   1          adc_sample_filter();
  92   1      
  93   1          // 连接串口查看ADC值
  94   1          printf("ADC_PIN_TOUCH = %d\r\n", adc_val);
  95   1          delay_ms(500);
  96   1      }
  97          
  98          // 测试用，还未能真正检测，只能将检测到的ad值直接转换成对应的百分比
  99          void adc_scan(void)
 100          {
 101   1          adc_sel_pin(ADC_PIN_BATTERY);
 102   1          adc_sample_filter(); // 滤波完成之后可能还会出现跳变，应该在后续加入死区判断
 103   1          fun_info.battery = (u8)((u32)adc_val * 100 / 4095); // u16的adc_val乘以100会直接溢出，这里要强转为u32
 104   1      
 105   1      #if MY_DEBUG
                  printf("ADC_PIN_BATTERY = %d\r\n", adc_val);
                  printf("battery : %d %%\n", (u16)fun_info.battery); // %d打印是两个字节，不强转会越界访问
              #endif
 109   1      
 110   1          get_battery = 1;
 111   1      
 112   1          delay_ms(10); // adc采样不能太频繁
 113   1      }


C51 COMPILER V9.60.7.0   ADC                                                               10/26/2024 17:00:25 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    309    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =      2       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
