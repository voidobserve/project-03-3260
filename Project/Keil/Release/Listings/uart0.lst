C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART0
OBJECT MODULE PLACED IN .\Release\Objects\uart0.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\uart0.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) I
                    -NCDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\L
                    -istings\uart0.lst) OBJECT(.\Release\Objects\uart0.obj)

line level    source

   1          #include "uart0.h"
   2          
   3          #include <string.h> // memset()
   4          
   5          // ÉèÖÃµÄ²¨ÌØÂÊÐèÒªÊÊÅäµ¥Æ¬»úµÄÊ±ÖÓ£¬ÕâÀïÖ±½ÓÊ¹ÓÃÁË¹Ù·½µÄ´úÂë
   6          #define USER_UART0_BAUD ((SYSCLK - UART0_BAUDRATE) / (UART0_BAUDRATE))
   7          
   8          // ÓÃÀ´´æ·Å½ÓÊÕµÄÊý¾ÝÖ¡µÄ»º³åÇø
   9          volatile u8 uart0_recv_buf[(UART0_RXBUF_LEN) / (FRAME_MAX_LEN)][FRAME_MAX_LEN] = {0};
  10          // ÓÃÓÚ¼ÇÂ¼½ÓÊÕ»º³åÇøµÄ¶ÔÓ¦µÄÊý¾ÝÖ¡µÄ³¤¶È
  11          volatile u8 uart0_recv_len[(UART0_RXBUF_LEN) / (FRAME_MAX_LEN)] = {0};
  12          // ¼ÇÂ¼»º³åÇøÖÐ¶ÔÓ¦µÄÎ»ÖÃÊÇ·ñÓÐÊý¾ÝµÄ±êÖ¾Î»£¨Êý×é£©
  13          // ÀýÈç£¬»º³åÇøÏÂ±ê0µÄÎ»ÖÃÓÐÖ¸Áî£¬±êÖ¾Î»Êý×éÏÂ±ê0µÄÔªËØÖµÎª1£¬Ã»ÓÐÖ¸Áî£¬ÔªËØµÄÖµÎª0
  14          volatile u8 recved_flagbuf[(UART0_RXBUF_LEN) / (FRAME_MAX_LEN)] = {0};
  15          
  16          volatile u8 flagbuf_valid_instruction[(UART0_RXBUF_LEN) / (FRAME_MAX_LEN)] = {0}; // ´æ·ÅÓÐºÏ·¨Ö¸ÁîµÄ±êÖ¾Î
             -»Êý×é
  17          
  18          // ´®¿ÚÖÐ¶Ï·þÎñº¯ÊýÖÐ£¬½ÓÊÕÒ»Ö¡µÄ±êÖ¾Î»£¬0--×¼±¸½ÓÊÕÒ»Ö¡µÄµÚÒ»¸ö×Ö½Ú£¬1--ÕýÔÚ½ÓÊÕ¸ÃÖ¡µÄÊý¾Ý
  19          static volatile bit flag_is_recving_data = 0;
  20          static volatile u8 frame_len = 0;    // ¼ÇÂ¼´®¿ÚÖÐ¶Ï·þÎñº¯ÊýÖÐ£¬µ±Ç°Òª½ÓÊÕµÄÊý¾ÝÖ¡µÄ×Ö½ÚÊý
  21          static volatile u8 cur_recv_len = 0; // ¼ÇÂ¼´®¿ÚÖÐ¶Ï·þÎñº¯ÊýÖÐ£¬µ±Ç°ÒÑ½ÓÊÕµÄÊý¾ÝÖ¡µÄ×Ö½ÚÊý
  22          volatile u8 recv_frame_cnt = 0;      // ½ÓÊÕµ½µÄÊý¾ÝÖ¡µÄ¸öÊý
  23          
  24          static volatile u32 blank_index = 0; // ¼ÇÂ¼µ±Ç°´æ·ÅÊý¾ÝÖ¡µÄ»º³åÇøµÄ¿ÕµÄµØ·½(»º³åÇøÏÂ±ê)£¬×¼±¸´æ·ÅÒ»Ö¡µÄÊý
             -¾Ý
  25          
  26          // bit test_bit = 0; // ²âÊÔÓÃ
  27          
  28          // u32 test_val = 0; // ²âÊÔÓÃ
  29          
  30          // ÖØÐ´putchar()º¯Êý
  31          char putchar(char c)
  32          {
  33   1          uart0_sendbyte(c);
  34   1          return c;
  35   1      }
  36          
  37          // uart0³õÊ¼»¯
  38          // ²¨ÌØÂÊÓÉºê UART0_BAUDRATE À´¾ö¶¨
  39          void uart0_config(void)
  40          {
  41   1          // µçÂ·°åÉÏ£¬P11Îª·¢ËÍÒý½Å£¬P12Îª½ÓÊÕÒý½Å
  42   1          P1_MD0 &= (~GPIO_P11_MODE_SEL(0x3) | ~GPIO_P12_MODE_SEL(0x3));
  43   1          P1_MD0 |= GPIO_P11_MODE_SEL(0x1); // Êä³öÄ£Ê½
  44   1          FOUT_S11 |= GPIO_FOUT_UART0_TX;   // ÅäÖÃP11ÎªUART0_TX
  45   1          FIN_S7 |= GPIO_FIN_SEL_P12;       // ÅäÖÃP12ÎªUART0_RX
  46   1      
  47   1          __EnableIRQ(UART0_IRQn); // ´ò¿ªUARTÄ£¿éÖÐ¶Ï
  48   1          IE_EA = 1;               // ´ò¿ª×ÜÖÐ¶Ï
  49   1      
  50   1          UART0_BAUD1 = (USER_UART0_BAUD >> 8) & 0xFF; // ÅäÖÃ²¨ÌØÂÊ¸ß°ËÎ»
  51   1          UART0_BAUD0 = USER_UART0_BAUD & 0xFF;        // ÅäÖÃ²¨ÌØÂÊµÍ°ËÎ»
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 2   

  52   1          UART0_CON0 = UART_STOP_BIT(0x0) |
  53   1                       UART_RX_IRQ_EN(0x1) |
  54   1                       UART_EN(0x1); // 8bitÊý¾Ý£¬1bitÍ£Ö¹Î»£¬Ê¹ÄÜRXÖÐ¶Ï
  55   1      
  56   1          // memset(uart0_recv_buf, 0, sizeof(uart0_recv_buf));
  57   1      }
  58          
  59          // UART0ÖÐ¶Ï·þÎñº¯Êý£¨½ÓÊÕÖÐ¶Ï£©
  60          void UART0_IRQHandler(void) interrupt UART0_IRQn
  61          {
  62   1          volatile u8 uart0_tmp_val = 0;
  63   1      
  64   1          // ½øÈëÖÐ¶ÏÉèÖÃIP£¬²»¿ÉÉ¾³ý
  65   1          __IRQnIPnPush(UART0_IRQn);
  66   1          // ---------------- ÓÃ»§º¯Êý´¦Àí -------------------
  67   1          // RX½ÓÊÕÍê³ÉÖÐ¶Ï
  68   1          if (UART0_STA & UART_RX_DONE(0x1))
  69   1          {
  70   2              // test_bit = 1;
  71   2              uart0_tmp_val = UART0_DATA; // ÁÙÊ±´æ·Å½ÓÊÕµ½µÄÊý¾Ý
  72   2      
  73   2              if ((0 == flag_is_recving_data && uart0_tmp_val != 0xA5) ||
  74   2                  (recv_frame_cnt >= ((UART0_RXBUF_LEN) / (FRAME_MAX_LEN))))
  75   2              {
  76   3                  // 1. Èç¹ûÊÇÐÂµÄÒ»Ö¡Êý¾Ý£¬È´²»ÊÇÒÔ0xA5¿ªÍ·£¬ËµÃ÷ÕâÒ»Ö¡Êý¾ÝÎÞÐ§
  77   3                  // 2. Èç¹û»º³åÇøÒÑÂú£¬´æ²»ÏÂ¸ü¶àµÄÊý¾ÝÖ¡
  78   3                  // Ö±½ÓÍË³öÖÐ¶Ï£¬²»´¦ÀíÊý¾Ý
  79   3                  tmr0_disable();
  80   3                  tmr0_cnt = 0;
  81   3                  __IRQnIPnPop(UART0_IRQn);
  82   3                  return;
  83   3              }
  84   2              // if ((0 == flag_is_recving_data && UART0_DATA == 0xA5) ||
  85   2              //     (1 == flag_is_recving_data && UART0_DATA == 0xA5))
  86   2              else if (uart0_tmp_val == 0xA5)
  87   2              {
  88   3                  // 1. Èç¹ûÊÇÐÂµÄÒ»Ö¡Êý¾Ý£¨ÒÔ¸ñÊ½Í·0xA5¿ªÊ¼£©£¬´ò¿ª¶¨Ê±Æ÷£¬Îª³¬Ê±ÅÐ¶Ï×ö×¼±¸
  89   3                  // 2. Èç¹ûÕýÔÚ½ÓÊÕÒ»Ö¡Êý¾Ý£¬È´ÓÖÊÕµ½ÁËÒ»´Î¸ñÊ½Í·£¬ÉáÆúÖ®Ç°ÊÕµ½µÄÊý¾Ý£¬ÖØÐÂ½ÓÊÕÕâÒ»Ö¡
  90   3                  flag_is_recving_data = 1;
  91   3                  cur_recv_len = 0;
  92   3                  frame_len = 0;
  93   3                  tmr0_disable();
  94   3                  tmr0_cnt = 0;
  95   3                  tmr0_enable();
  96   3              }
  97   2      
  98   2              if (1 == cur_recv_len)
  99   2              {
 100   3                  // Èç¹û½ÓÊÕµ½Ò»Ö¡µÄµÚ¶þ¸ö×Ö½ÚµÄÊý¾Ý£¬¼ÇÂ¼ÏÂÒª½ÓÊÕµÄÊý¾Ý³¤¶È
 101   3                  frame_len = uart0_tmp_val;
 102   3                  // test_val = frame_len;
 103   3                  // printf("frame_len %d\n", (int32)frame_len);
 104   3              }
 105   2      
 106   2              // ³ÌÐòÔËÐÐµ½ÕâÀï£¬ËµÃ÷ÕýÔÚ½ÓÊÕÒ»¸öÊý¾ÝÖ¡
 107   2              if (0 == recved_flagbuf[blank_index])
 108   2              {
 109   3                  // Èç¹û»º³åÇøÖÐÓÐÊ£ÓàÎ»ÖÃÀ´´æ·ÅÒ»¸öÖ¡£¬²Å·ÅÈëÊý¾Ý
 110   3                  uart0_recv_buf[blank_index][cur_recv_len++] = uart0_tmp_val;
 111   3                  // uart0_recv_buf[0][cur_recv_len++] = UART0_DATA; // ²âÊÔÓÃ
 112   3                  tmr0_cnt = 0; // Ã¿½ÓÊÕµ½Ò»¸ö×Ö½ÚÊý¾Ý£¬Çå¿Õ³¬Ê±µÄ¼ÆÊ±
 113   3      
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 3   

 114   3      #if 1
 115   3                  if ((frame_len != 0) &&
 116   3                      (cur_recv_len) == frame_len)
 117   3                  {
 118   4                      // Èç¹û½ÓÊÕÍêÁËÒ»Ö¡Êý¾Ý
 119   4                      uart0_recv_len[blank_index] = frame_len; // ¸üÐÂµ±Ç°Êý¾ÝÖ¡µÄ³¤¶È
 120   4                      // printf("frame_len %d\n", (int32)frame_len);
 121   4                      flag_is_recving_data = 0; // ±êÖ¾Î»ÇåÁã£¬×¼±¸½ÓÊÕÏÂÒ»Ö¡Êý¾Ý
 122   4                      cur_recv_len = 0;
 123   4                      frame_len = 0;
 124   4      
 125   4                      recved_flagbuf[blank_index] = 1; // ¶ÔÓ¦µÄ½ÓÊÕÍê³É±êÖ¾Î»ÖÃÒ»
 126   4                      recv_frame_cnt++;                // ½ÓÊÕµ½ÍêÕûµÄÒ»Ö¡£¬¼ÆÊýÖµ¼ÓÒ»
 127   4                      // test_bit = 1; // ²âÊÔÓÃ
 128   4                      blank_index++;
 129   4                      if (blank_index >= ((UART0_RXBUF_LEN) / (FRAME_MAX_LEN)))
 130   4                      {
 131   5                          blank_index = 0;
 132   5                      }
 133   4      
 134   4                      // if (recv_frame_cnt < ((UART0_RXBUF_LEN) / (FRAME_MAX_LEN)))
 135   4                      // {
 136   4                      //     // Èç¹ûÊý×éÖÐÓÐ¿ÕÎ»£¨½ÓÊÕµÄÊý¾ÝÖ¡¸öÊý < »º³åÇø×Ü¹²ÄÜ½ÓÊÕµÄÊý¾ÝÖ¡¸öÊý£©
 137   4      
 138   4                      //     // Æ«ÒÆµ½Êý×éÖÐ¿ÕµÄµØ·½£¬×¼±¸ÌîÈëÏÂÒ»¸öÊý¾ÝÖ¡
 139   4                      //     while (1)
 140   4                      //     {
 141   4                      //         blank_index++;
 142   4      
 143   4                      //         if (blank_index >= ((UART0_RXBUF_LEN) / (FRAME_MAX_LEN)))
 144   4                      //         {
 145   4                      //             // Èç¹ûÏÂ±ê³¬³öÁË»º³åÇøÄÜÈÝÄÉµÄÖ¸Áî¸öÊý
 146   4                      //             blank_index = 0;
 147   4                      //         }
 148   4      
 149   4                      //         if (0 == recved_flagbuf[blank_index])
 150   4                      //         {
 151   4                      //             // Èç¹ûÊÇ¿ÕµÄÒ»´¦»º³åÇø£¬ÍË³ö£¬×¼±¸¸øÏÂÒ»´Î½ÓÊÕÊý¾ÝÖ¡
 152   4                      //             break;
 153   4                      //         }
 154   4                      //     }
 155   4                      // }
 156   4      
 157   4                      {
 158   5                          tmr0_disable();
 159   5                          tmr0_cnt = 0;
 160   5                          __IRQnIPnPop(UART0_IRQn);
 161   5                          return;
 162   5                      }
 163   4                  } // if ((cur_recv_len) == frame_len)
 164   3      #endif
 165   3              } // if (0 == recved_flagbuf[blank_index])
 166   2              // else // Èç¹ûµ±Ç°»º³åÇøÖÐÃ»ÓÐÊ£ÓàÎ»ÖÃÀ´´æ·ÅÒ»¸öÖ¡£¬
 167   2              // {
 168   2              // }
 169   2      
 170   2          } // if (UART0_STA & UART_RX_DONE(0x1))
 171   1      
 172   1          // ÍË³öÖÐ¶ÏÉèÖÃIP£¬²»¿ÉÉ¾³ý
 173   1          __IRQnIPnPop(UART0_IRQn);
 174   1      }
 175          
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 4   

 176          // UART0·¢ËÍÒ»¸ö×Ö½ÚÊý¾ÝµÄº¯Êý
 177          void uart0_sendbyte(u8 senddata)
 178          {
 179   1          while (!(UART0_STA & UART_TX_DONE(0x01)))
 180   1              ;
 181   1          UART0_DATA = senddata;
 182   1          while (!(UART0_STA & UART_TX_DONE(0x01))) // µÈ´ýÕâ´Î·¢ËÍÍê³É
 183   1              ;
 184   1      }
 185          
 186          // Í¨¹ýuart0·¢ËÍÈô¸ÉÊý¾Ý
 187          void uart0_send_buff(u8* buf, u8 len)
 188          {
 189   1          u8 i = 0;
 190   1          for(; i < len; i++)
 191   1          {
 192   2              uart0_sendbyte(buf[i]);
 193   2          }
 194   1      }
 195          
 196          // ¶ÔUART0½ÓÊÕ»º³åÇøµÄÊý¾Ý½øÐÐÑéÖ¤£¨³¬Ê±ÑéÖ¤¡¢³¤¶ÈÑéÖ¤¡¢Ð£ÑéºÍ¼ÆËã£©
 197          extern void __uart_buff_check(void);
 198          void uart0_scan_handle(void)
 199          {
 200   1          u8 i = 0;                                  // Ñ­»·¼ÆÊýÖµ£¨×¢ÒâÑ­»·´ÎÊýÒª´óÓÚµÈÓÚÊý×éÄÜ´æ·ÅµÄÖ¸ÁîÊýÄ¿£©
 201   1          volatile u8 checksum = 0;                  // ´æ·ÅÁÙÊ±µÄÐ£ÑéºÍ
 202   1          volatile bit __flag_is_crc_or_len_err = 0; // ±êÖ¾Î»£¬Ð£ÑéºÍ / Êý¾Ý³¤¶È ÊÇ·ñ´íÎó,0--Î´³ö´í£¬1--³ö´í
 203   1      
 204   1      #if 1 // ½ÓÊÕ³¬Ê±´¦Àí
 205   1      
 206   1          if (tmr0_cnt > 10) // Ò»Ö¡ÄÚ£¬³¬¹ý10msÃ»ÓÐÊÕµ½Êý¾Ý
 207   1          {
 208   2              // Èç¹û³¬Ê±
 209   2              // uart0_sendstr("Time out!\n");
 210   2      
 211   2              tmr0_disable(); // ¹Ø±Õ¶¨Ê±Æ÷
 212   2              tmr0_cnt = 0;   // Çå¿Õ¶¨Ê±Æ÷¼ÆÊýÖµ
 213   2      
 214   2              // µ±Ç°µÄÊý¾ÝÖ¡×÷·Ï
 215   2              cur_recv_len = 0;         // µ±Ç°½ÓÊÕµ½µÄÖ¡µÄ³¤¶ÈÇåÁã
 216   2              frame_len = 0;            // Òª½ÓÊÕµÄÖ¡µÄ³¤¶È£¬ÇåÁã
 217   2              flag_is_recving_data = 0; // ÖØÐÂ¿ªÊ¼½ÓÊÕÊý¾Ý
 218   2      
 219   2              // if (0 == recved_flagbuf[blank_index])
 220   2              // {
 221   2              //     memset(uart0_recv_buf[blank_index], 0, FRAME_MAX_LEN); // Çå¿Õ³¬Ê±µÄÖ¸Áî¶ÔÓ¦µÄ½ÓÊÕ»º³åÇø
 222   2              // }
 223   2      
 224   2      #if USE_MY_DEBUG
 225   2              printf("recv time out! \n");
 226   2      #endif
 227   2      
 228   2      #if 0
                      for (i = 0; i < (UART0_RXBUF_LEN) / (FRAME_MAX_LEN); i++)
                      {
                          printf("%d :\t", i);
                          for (j = 0; j < FRAME_MAX_LEN; j++)
                          {
                              printf("%x ", uart0_recv_buf[i][j]);
                          }
                          printf("\n");
                      }
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 5   

              #endif // MY_DEBUG
 239   2      
 240   2              return;
 241   2          }
 242   1      #endif // ½ÓÊÕ³¬Ê±´¦Àí
 243   1      
 244   1          // ¶ÔÊÕµ½µÄÊý¾ÝÖ¡½øÐÐÑéÖ¤
 245   1          for (i = 0; i < ((UART0_RXBUF_LEN) / (FRAME_MAX_LEN)); i++)
 246   1          {
 247   2              if (recved_flagbuf[i])
 248   2              {
 249   3                  // Èç¹û¶ÔÓ¦µÄÎ»ÖÃÓÐÍêÕûµÄÊý¾ÝÖ¡
 250   3                  // __uart_buff_check(); // ²âÊÔÓÃ
 251   3      
 252   3                  if (uart0_recv_len[i] != uart0_recv_buf[i][1])
 253   3                  {
 254   4      // Èç¹ûÊý¾ÝÖ¡µÄ³¤¶È²»ÕýÈ·
 255   4      #if USE_MY_DEBUG
 256   4                      printf("format len invalid!\n");
 257   4      
 258   4                      printf("%d  %d \n", (u32)uart0_recv_len[i], (u32)uart0_recv_buf[i][1]);
 259   4      
 260   4                      __uart_buff_check();
 261   4      #endif
 262   4                      recved_flagbuf[i] = 0;
 263   4                      recv_frame_cnt--;
 264   4                      memset(uart0_recv_buf[i], 0, FRAME_MAX_LEN);
 265   4      
 266   4                      return;
 267   4                  }
 268   3      
 269   3                  {                          // ¼ÆËãÐ£ÑéºÍ
 270   4                      u8 __loop_crc_cnt = 0; // ÓÃÓÚ¼ÆËãÐ£ÑéºÍµÄÑ­»·¼ÆÊýÖµ
 271   4                      checksum = 0;
 272   4                      for (__loop_crc_cnt = 0; __loop_crc_cnt < (uart0_recv_len[i] - 1); __loop_crc_cnt++)
 273   4                      {
 274   5                          checksum += uart0_recv_buf[i][__loop_crc_cnt];
 275   5                      }
 276   4      
 277   4                      checksum &= 0x0F; // È¡µÍ4Î»×÷ÎªÐ£Ñé
 278   4                      // checksum &= 0xFF; // È¡8Î»×÷ÎªÐ£Ñé
 279   4                      if (checksum != uart0_recv_buf[i][uart0_recv_len[i] - 1])
 280   4                      {
 281   5                          // Èç¹û¼ÆËãµÄÐ£ÑéºÍÓëÊÕµ½µÄÐ£ÑéºÍ²»Ò»ÖÂ
 282   5                          __flag_is_crc_or_len_err = 1;
 283   5                      }
 284   4                  } // ¼ÆËãÐ£ÑéºÍ
 285   3      
 286   3                  if (__flag_is_crc_or_len_err)
 287   3                  {
 288   4      #if USE_MY_DEBUG
 289   4                      printf("recv crc or len err! \n");
 290   4      #endif
 291   4                      // flag_is_recving_data = 0;
 292   4                      __flag_is_crc_or_len_err = 0; //
 293   4                      recved_flagbuf[i] = 0;
 294   4                      recv_frame_cnt--;
 295   4                      memset(uart0_recv_buf[i], 0, FRAME_MAX_LEN); // Çå¿ÕÐ£ÑéºÍ´íÎóµÄÖ¸Áî¶ÔÓ¦µÄ»º³åÇø
 296   4                  }
 297   3      
 298   3                  // Èç¹ûÔËÐÐµ½ÕâÀï£¬Êý¾Ý¶¼Õý³£
 299   3                  flagbuf_valid_instruction[i] = 1; // ¶ÔÓ¦µÄ±êÖ¾Î»ÖÃÒ»£¬±íÊ¾ÊÕµ½ÁËºÏ·¨µÄÖ¸Áî
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 6   

 300   3              } // if (recved_flagbuf[i])
 301   2          } // for (i = 0; i < ((UART0_RXBUF_LEN) / (FRAME_MAX_LEN)); i++)
 302   1      }
 303          
 304          // Çå³ý´®¿Ú½ÓÊÕ»º³åÇøÖÐ£¬µ¥¸öÒÑ¾­´¦ÀíºÃµÄÖ¸Áî
 305          void uart_clear_single_instruction(u8 index)
 306          {
 307   1          flagbuf_valid_instruction[index] = 0;            // Çå¿Õ»º³åÇø¶ÔÓ¦µÄÔªËØ£¬±íÊ¾¸ÃÏÂ±êµÄÖ¸ÁîÒÑ¾­´¦Àí
 308   1          uart0_recv_len[index] = 0;                       // Çå³ý»º³åÇøÖÐÖ¸Áî¶ÔÓ¦µÄ³¤¶È
 309   1          recved_flagbuf[index] = 0;                       // Çå³ý½ÓÊÕµ½Ö¸ÁîµÄ±êÖ¾Î»
 310   1          memset(uart0_recv_buf[index], 0, FRAME_MAX_LEN); // Çå¿Õ»º³åÇø¶ÔÓ¦µÄÖ¸Áî
 311   1      }
 312          
 313          #if 1
 314          // ²âÊÔÓÃµÄ³ÌÐò£º
 315          // ÏÔÊ¾´®¿Ú»º³åÇøÖÐµÄÊý¾Ý£º
 316          void __uart_buff_check(void)
 317          {
 318   1          u8 i = 0;
 319   1      
 320   1          u8 k = 0;
 321   1          // if (test_bit)
 322   1          // {
 323   1          //     test_bit = 0;
 324   1          for (i = 0; i < (UART0_RXBUF_LEN) / (FRAME_MAX_LEN); i++)
 325   1          {
 326   2              uart0_sendbyte(i + '0');
 327   2              uart0_sendbyte('\n');
 328   2              for (k = 0; k < FRAME_MAX_LEN; k++)
 329   2              {
 330   3                  printf("%2x ", (u16)uart0_recv_buf[i][k]);
 331   3              }
 332   2      
 333   2              printf("\n==========================\n");
 334   2          }
 335   1          // }
 336   1      }
 337          #endif
 338          
 339          #if 0
                          switch (uart0_recv_len[i])
                          {
                          case 4:
              
                              // Èç¹ûÊÇËÄ¸ö×Ö½ÚµÄÊý¾Ý
                              checksum = (uart0_recv_buf[i][0] + uart0_recv_buf[i][1] + uart0_recv_buf[i][2]) & 0x0F;
              
                              if (checksum != uart0_recv_buf[i][3])
                              {
                                  // Èç¹û¼ÆËãµÃ³öµÄÐ£ÑéºÍÓëÊý¾ÝÖ¡ÖÐµÄÐ£ÑéºÍ²»Ò»ÖÂ
                                  // ËµÃ÷´«ÊäµÄÊý¾ÝÓÐÎó
                                  // uart0_sendstr("checknum err_4Bytes\n");
                                  // recved_flagbuf[i] = 0;
                                  // recv_frame_cnt--;
                                  // memset(uart0_recv_buf[i], 0, FRAME_MAX_LEN);
                                  __flag_is_crc_or_len_err = 1;
                              }
              
                              break;
              
                          case 5:
              
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 7   

                              // Èç¹ûÊÇÎå¸ö×Ö½ÚµÄÊý¾Ý
                              checksum = (uart0_recv_buf[i][0] + uart0_recv_buf[i][1] + uart0_recv_buf[i][2] + uart0_rec
             -v_buf[i][3]) & 0x0F;
                              if (checksum != uart0_recv_buf[i][4])
                              {
                                  // Èç¹û¼ÆËãµÃ³öµÄÐ£ÑéºÍÓëÊý¾ÝÖ¡ÖÐµÄÐ£ÑéºÍ²»Ò»ÖÂ
                                  // ËµÃ÷´«ÊäµÄÊý¾ÝÓÐÎó
                                  // uart0_sendstr("checknum err_5Bytes\n");
                                  // recved_flagbuf[i] = 0;
                                  // recv_frame_cnt--;
                                  // memset(uart0_recv_buf[i], 0, FRAME_MAX_LEN);
                                  __flag_is_crc_or_len_err = 1;
                              }
              
                              break;
                          case 6:
              
                              // Èç¹ûÊÇÁù¸ö×Ö½ÚµÄÊý¾Ý
                              checksum = (uart0_recv_buf[i][0] + uart0_recv_buf[i][1] + uart0_recv_buf[i][2] + uart0_rec
             -v_buf[i][3] + uart0_recv_buf[i][4]) & 0x0F;
              
                              if (checksum != uart0_recv_buf[i][5])
                              {
                                  // Èç¹û¼ÆËãµÃ³öµÄÐ£ÑéºÍÓëÊý¾ÝÖ¡ÖÐµÄÐ£ÑéºÍ²»Ò»ÖÂ
                                  // ËµÃ÷´«ÊäµÄÊý¾ÝÓÐÎó
                                  // uart0_sendstr("checknum err_6Bytes\n");
                                  // recved_flagbuf[i] = 0;
                                  // recv_frame_cnt--;
                                  // memset(uart0_recv_buf[i], 0, FRAME_MAX_LEN);
                                  __flag_is_crc_or_len_err = 1;
                              }
              
                              break;
                          case 7: // Èç¹ûÊÇ7¸ö×Ö½ÚµÄÊý¾Ý
                              checksum = (uart0_recv_buf[i][0] + uart0_recv_buf[i][1] + uart0_recv_buf[i][2] + uart0_rec
             -v_buf[i][3] + uart0_recv_buf[i][4] + uart0_recv_buf[i][5]) & 0x0F;
                              if (checksum != uart0_recv_buf[i][6])
                              {
                                  // Èç¹û¼ÆËãµÃ³öµÄÐ£ÑéºÍÓëÊý¾ÝÖ¡ÖÐµÄÐ£ÑéºÍ²»Ò»ÖÂ
                                  // ËµÃ÷´«ÊäµÄÊý¾ÝÓÐÎó
                                  // recved_flagbuf[i] = 0;
                                  // recv_frame_cnt--;
              
                                  __flag_is_crc_or_len_err = 1;
                              }
                              break;
                          case 8: // Èç¹ûÊÇ8¸ö×Ö½ÚµÄÊý¾Ý
                              checksum = (uart0_recv_buf[i][0] + uart0_recv_buf[i][1] + uart0_recv_buf[i][2] + uart0_rec
             -v_buf[i][3] + uart0_recv_buf[i][4] + uart0_recv_buf[i][5] + uart0_recv_buf[i][6]) & 0x0F;
                              if (checksum != uart0_recv_buf[i][7])
                              {
                                  // Èç¹û¼ÆËãµÃ³öµÄÐ£ÑéºÍÓëÊý¾ÝÖ¡ÖÐµÄÐ£ÑéºÍ²»Ò»ÖÂ
                                  // ËµÃ÷´«ÊäµÄÊý¾ÝÓÐÎó
                                  // recved_flagbuf[i] = 0;
                                  // recv_frame_cnt--;
                                  __flag_is_crc_or_len_err = 1;
                              }
                              break;
              
                          default:
                              // Èç¹û²»ÊÇËÄ¡¢Îå¡¢Áù¡¢Æß¡¢°Ë¸ö×Ö½ÚµÄÊý¾Ý£¬ËµÃ÷½ÓÊÕÓÐÎó£¬Ö±½ÓÅ×ÆúÕâÒ»Ö¡Êý¾Ý
              #if USE_MY_DEBUG
C51 COMPILER V9.60.7.0   UART0                                                             11/08/2024 16:31:54 PAGE 8   

                              // printf("recv cnt err\n");
                              __flag_is_crc_or_len_err = 1;
              #endif
                              // recved_flagbuf[i] = 0;
                              // recv_frame_cnt--;
                              // memset(uart0_recv_buf[i], 0, FRAME_MAX_LEN);
              
                              break;
                          } // switch (uart0_recv_len[i])
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1143    ----
   CONSTANT SIZE    =    104    ----
   XDATA SIZE       =     46      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
